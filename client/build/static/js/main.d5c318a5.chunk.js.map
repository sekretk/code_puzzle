{"version":3,"sources":["List.js","index.js"],"names":["SortableItem","sortableElement","_ref","value","onToggle","line","commented","react_default","a","createElement","className","onMouseDown","SortableContainer","sortableContainer","_ref2","children","List","_ref3","items","pollId","text","_useState","useState","_useState2","Object","slicedToArray","itemsVal","setItems","_useState3","undefined","_useState4","result","setResult","_useState5","_useState6","setIncorrecrt","onSubmit","_ref5","asyncToGenerator","regenerator_default","mark","_callee","rawResponse","content","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","id","lines","filter","block","map","sent","Boolean","stop","apply","this","arguments","onNext","window","location","reload","Fragment","onClick","onSortEnd","_ref4","oldIndex","newIndex","arrayMoveImmutable","index","key","concat","item","objectSpread","swapInArray","arr","idx1","idx2","toConsumableArray","fetchedPolls","poll","json","blocks","Math","random","render","description","document","getElementById"],"mappings":"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","file":"static/js/main.d5c318a5.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport { render } from 'react-dom';\nimport { sortableContainer, sortableElement } from 'react-sortable-hoc';\nimport { arrayMoveImmutable } from 'array-move';\n\nconst SortableItem = sortableElement(({ value, onToggle }) => {\n    const { line, commented } = value;\n    return (<li className={commented ? 'commented' : ''}>\n        <div className=\"item\">\n            <button onMouseDown={onToggle}>com</button>\n            <p>{line}</p>\n        </div>\n    </li>)\n});\n\nconst SortableContainer = sortableContainer(({ children }) => {\n    return <ul>{children}</ul>;\n});\n\nexport default function List({ items, pollId, text }) {\n\n    const [itemsVal, setItems] = useState(items);\n\n    const [result, setResult] = useState(undefined);\n\n    const [incorrect, setIncorrecrt] = useState(false);\n\n    const onSortEnd = ({ oldIndex, newIndex }) => {\n        setItems(arrayMoveImmutable(itemsVal, oldIndex, newIndex));\n    };\n\n    const onSubmit = async () => {\n        const rawResponse = await fetch('http://boysthings.top:9999/result', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ id: pollId, lines: itemsVal.filter(block => !block.commented).map(block => block.id) })\n        });\n        const content = await rawResponse.text();\n\n        setResult(content);\n\n        setIncorrecrt(!Boolean(content))\n    }\n\n    const onNext = () => {\n        window.location.reload();\n    }\n\n    const onItemToggle = (id) => () => {\n        setItems(itemsVal.map((item) => ({ ...item, commented: item.id === id ? !item.commented : item.commented })))\n    }\n\n    return (\n        <>\n            <p>{text}</p>\n            <button onClick={onNext}>Дальше</button>\n            <button onClick={onSubmit}>Submit</button>\n            <div className=\"content\">\n                <SortableContainer onSortEnd={onSortEnd}>\n                    {itemsVal.map((value, index) => (\n                        <SortableItem key={`item-${value.id}`} index={index} value={value} onToggle={onItemToggle(value.id)} />\n                    ))}\n                </SortableContainer>\n            </div>\n            {Boolean(result) && <div className=\"result\">\n                <button onClick={onNext}>Дальше</button>\n                <p>{result}</p>\n            </div>}\n            \n        </>);\n}\n","import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport './styles.css'\nimport List from './List'\n\nexport const swapInArray = (arr, idx1, idx2) => {\n  const result = [...arr];\n  [result[idx1], result[idx2]] = [arr[idx2], arr[idx1]]\n  return result;\n}\n\n(async () => {\n  const fetchedPolls = await fetch('http://boysthings.top:9999/rndpoll');\n\n  const poll = await fetchedPolls.json();\n\n  const items = poll.blocks.map(block => ({ ...block, commented: Math.random() < 0.5 }))\n\n  // render(<DraggableList pollId={poll.id} text={poll.description} items={items} />, document.getElementById('root'))\n\n  // render(<List />, document.getElementById('root'))\n  // })();\n\n\n  render(<List pollId={poll.id} text={poll.description} items={items}/>, document.getElementById('root'))\n\n})();"],"sourceRoot":""}