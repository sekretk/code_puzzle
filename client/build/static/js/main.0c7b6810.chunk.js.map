{"version":3,"sources":["App.js","index.js"],"names":["fn","order","down","originalIndex","curIndex","y","index","scale","zIndex","shadow","immediate","n","indexOf","ItemElement","_ref","key","_ref$item","item","name","commented","onToggle","react_default","a","createElement","className","onMouseDown","e","stopPropagation","console","log","DraggableList","_ref2","items","_useState","pollId","text","useState","map","x","id","Object","objectSpread","_useState2","slicedToArray","itemsVal","setItems","useRef","_","_useSprings","useSprings","length","current","_useSprings2","springs","setSprings","bind","useGesture","_ref3","args","delta","curRow","clamp","Math","round","newOrder","swap","onItemToggle","i","style","height","_ref4","web","div","assign","boxShadow","interpolate","s","concat","transform","App_ItemElement","asyncToGenerator","regenerator_default","mark","_callee","fetchedPolls","poll","wrap","_context","prev","next","fetch","sent","json","blocks","block","random","render","description","document","getElementById","stop"],"mappings":"0QAOMA,EAAK,SAACC,EAAOC,EAAMC,EAAeC,EAAUC,GAAvC,OAA6C,SAACC,GAAD,OACtDJ,GAAQI,IAAUH,EACd,CAAEE,EAAc,IAAXD,EAAiBC,EAAGE,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,GAAIC,UAAW,SAACC,GAAD,MAAa,MAANA,GAAmB,WAANA,IAC7F,CAAEN,EAA0B,IAAvBJ,EAAMW,QAAQN,GAAcC,MAAO,EAAGC,OAAQ,IAAKC,OAAQ,EAAGC,WAAW,KAE9EG,EAAc,SAAAC,GAAkDA,EAA/CC,IAA+C,IAAAC,EAAAF,EAA1CG,KAAQC,EAAkCF,EAAlCE,KAAMC,EAA4BH,EAA5BG,UAAaC,EAAeN,EAAfM,SAOrD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQE,YARU,SAACC,GACrBA,EAAEC,kBACFC,QAAQC,MACRT,MAKE,iBACAC,EAAAC,EAAAC,cAAA,KAAGC,UAAWL,EAAY,YAAc,IAAKD,KAIpC,SAASY,EAATC,GAAgD,IAAvBC,EAAuBD,EAAvBC,MAAuBC,GAAAF,EAAhBG,OAAgBH,EAARI,KACxBC,mBAASJ,EAAMK,IAAI,SAACC,EAAGC,GAAJ,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAiBF,EAAjB,CAAoBC,WADPG,EAAAF,OAAAG,EAAA,EAAAH,CAAAP,EAAA,GACtDW,EADsDF,EAAA,GAC5CG,EAD4CH,EAAA,GAEvDzC,EAAQ6C,iBAAOd,EAAMK,IAAI,SAACU,EAAGzC,GAAJ,OAAcA,KAFgB0C,EAG/BC,YAAWL,EAASM,OAAQlD,EAAGC,EAAMkD,UAHNC,EAAAZ,OAAAG,EAAA,EAAAH,CAAAQ,EAAA,GAGtDK,EAHsDD,EAAA,GAG7CE,EAH6CF,EAAA,GAIvDG,EAAOC,YAAW,SAAAC,GAAmD,IAAzCtD,EAAyCqC,OAAAG,EAAA,EAAAH,CAAAiB,EAAhDC,KAAgD,MAAzBxD,EAAyBuD,EAAzBvD,KAAgBG,EAASmC,OAAAG,EAAA,EAAAH,CAAAiB,EAAnBE,MAAmB,MACnEvD,EAAWH,EAAMkD,QAAQvC,QAAQT,GACjCyD,EAASC,YAAMC,KAAKC,OAAkB,IAAX3D,EAAiBC,GAAK,KAAM,EAAGuC,EAASM,OAAS,GAC5Ec,EAAWC,IAAKhE,EAAMkD,QAAS/C,EAAUwD,GAC/CN,EAAWtD,EAAGgE,EAAU9D,EAAMC,EAAeC,EAAUC,IAClDH,IAAMD,EAAMkD,QAAUa,KAGvBE,EAAe,SAACC,GAAD,OAAO,WAC1BvC,QAAQC,IAAI,YAAasC,GACzBtB,EAASD,EAASP,IAAI,SAACpB,GAAD,OAAAuB,OAAAC,EAAA,EAAAD,CAAA,GAAgBvB,EAAhB,CAAsBE,UAAWF,EAAKsB,KAAO4B,GAAKlD,EAAKE,UAAYF,EAAKE,iBAGhG,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU4C,MAAO,CAAEC,OAA0B,GAAlBzB,EAASM,SAChDG,EAAQhB,IAAI,SAAAiC,EAA+BH,GAA/B,IAAG3D,EAAH8D,EAAG9D,OAAQC,EAAX6D,EAAW7D,OAAQJ,EAAnBiE,EAAmBjE,EAAGE,EAAtB+D,EAAsB/D,MAAtB,OACXc,EAAAC,EAAAC,cAACgD,EAAA,EAASC,IAAVhC,OAAAiC,OAAA,GACMlB,EAAKY,GADX,CAEEpD,IAAKoD,EACLC,MAAO,CACL5D,SACAkE,UAAWjE,EAAOkE,YAAY,SAACC,GAAD,iCAAAC,OAAkCD,EAAlC,OAAAC,OAAyC,EAAID,EAA7C,YAC9BE,UAAWH,YAAY,CAACtE,EAAGE,GAAQ,SAACF,EAAGuE,GAAJ,uBAAAC,OAA2BxE,EAA3B,gBAAAwE,OAA2CD,EAA3C,UAErCvD,EAAAC,EAAAC,cAACwD,EAAD,CAAa9D,KAAM2B,EAASuB,GAAI/C,SAAU8C,EAAaC,UC1CnE3B,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAA3D,EAAA4D,KAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAArD,EAAA,OAAAiD,EAAA3D,EAAAgE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC0BC,MAAM,sCADhC,cACKN,EADLG,EAAAI,KAAAJ,EAAAE,KAAA,EAGkBL,EAAaQ,OAH/B,OAGKP,EAHLE,EAAAI,KAKK3D,EAAQqD,EAAKQ,OAAOxD,IAAI,SAAAyD,GAAK,MAAK,CAAC5E,KAAM4E,EAAO3E,UAAW2C,KAAKiC,SAAW,MAEjFC,iBAAO3E,EAAAC,EAAAC,cAACO,EAAD,CAAeI,OAAQmD,EAAK9C,GAAIJ,KAAMkD,EAAKY,YAAajE,MAAOA,IAAWkE,SAASC,eAAe,SAPxG,wBAAAZ,EAAAa,SAAAjB,KAAD3C","file":"static/js/main.0c7b6810.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport clamp from 'lodash-es/clamp'\nimport swap from 'lodash-move'\nimport { useGesture } from 'react-use-gesture'\nimport { useSprings, animated, interpolate } from 'react-spring'\n\n// Returns fitting styles for dragged/idle items\nconst fn = (order, down, originalIndex, curIndex, y) => (index) =>\n  down && index === originalIndex\n    ? { y: curIndex * 100 + y, scale: 1.1, zIndex: '1', shadow: 15, immediate: (n) => n === 'y' || n === 'zIndex' }\n    : { y: order.indexOf(index) * 100, scale: 1, zIndex: '0', shadow: 1, immediate: false }\n\nconst ItemElement = ({ key, item: { name, commented }, onToggle }) => {\n  const onToggleClick = (e) => {\n    e.stopPropagation()\n    console.log()\n    onToggle()\n  }\n\n  return (\n    <div className=\"item\">\n      <button onMouseDown={onToggleClick}>togglecomment</button>\n      <p className={commented ? 'commented' : ''}>{name}</p>\n    </div>\n  )\n}\nexport default function DraggableList({ items, pollId, text }) {\n  const [itemsVal, setItems] = useState(items.map((x, id) => ({ ...x, id })))\n  const order = useRef(items.map((_, index) => index)) // Store indicies as a local ref, this represents the item order\n  const [springs, setSprings] = useSprings(itemsVal.length, fn(order.current)) // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n  const bind = useGesture(({ args: [originalIndex], down, delta: [, y] }) => {\n    const curIndex = order.current.indexOf(originalIndex)\n    const curRow = clamp(Math.round((curIndex * 100 + y) / 100), 0, itemsVal.length - 1)\n    const newOrder = swap(order.current, curIndex, curRow)\n    setSprings(fn(newOrder, down, originalIndex, curIndex, y)) // Feed springs new style data, they'll animate the view without causing a single render\n    if (!down) order.current = newOrder\n  })\n\n  const onItemToggle = (i) => () => {\n    console.log('to toggle', i)\n    setItems(itemsVal.map((item) => ({ ...item, commented: item.id === i ? !item.commented : item.commented })))\n  }\n\n  return (\n    <div>\n      <div className=\"content\" style={{ height: itemsVal.length * 50 }}>\n        {springs.map(({ zIndex, shadow, y, scale }, i) => (\n          <animated.div\n            {...bind(i)}\n            key={i}\n            style={{\n              zIndex,\n              boxShadow: shadow.interpolate((s) => `rgba(0, 0, 0, 0.15) 0px ${s}px ${2 * s}px 0px`),\n              transform: interpolate([y, scale], (y, s) => `translate3d(0,${y}px,0) scale(${s})`)\n            }}>\n            <ItemElement item={itemsVal[i]} onToggle={onItemToggle(i)} />\n          </animated.div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import { render } from 'react-dom'\nimport React from 'react'\nimport './styles.css'\nimport DraggableList from './App'\n\n// const items = [\n//   { name: 'compact', commented: false },\n//   { name: 'takeWhile', commented: false },\n//   { name: 'filter', commented: true },\n//   { name: 'skip(1)', commented: false },\n//   { name: 'shareReply', commented: true }\n// ]\n\n(async () => {\nconst fetchedPolls = await fetch('http://boysthings.top:9999/rndpoll');\n\nconst poll = await fetchedPolls.json();\n\nconst items = poll.blocks.map(block => ({name: block, commented: Math.random() < 0.5}))\n\nrender(<DraggableList pollId={poll.id} text={poll.description} items={items} />, document.getElementById('root'))\n})();"],"sourceRoot":""}