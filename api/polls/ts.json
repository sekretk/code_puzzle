[
    {
      "description": "Получить компилируемый вызов в последней строке функции \nconst comb: (subject: Animal) => void = () => {};",
      "blocks": [
        {
          "id": 1,
          "line": "type Chordata = { length: number };"
        },
        {
          "id": 2,
          "line": "type Animal = Chordata & { breed: string };"
        },
        {
          "id": 3,
          "line": "type Pet = Animal & { name: string }"
        },
        {
          "id": 4,
          "line": "comb({} as Pet);"
        },
        {
          "id": 5,
          "line": "comb({} as Chordata);"
        }
      ],
      "answers": [
        [
          1,2,3,4
        ]
      ],
      "result": {
        "links": [
          { "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/C4TwDgpgBAwgFgewE4BMCGw1QLxQN5QA2EAdgObBwBcUJArgLYBGESUAvgNwCwAUKJCgBBEgEsGaQjliJUGLADJ8UJkggQUNAM7Ako8hx79w0AAoRg0keMlQlBEmgYRtu-WQ58+AYwQkdUL7MNAAUWnRMAFYQ3sA01hKEAJQ4AHxQAG4IoijSISnY6XhcXrxBTCHFUGhaUObASUbllezVtfDI6JiNQA"
          }
        ],
        "text": "You right!"
      },
      "sortable": true,
      "multiple": true
    },
    {
      "description": "Есть функция: const format: (item: number) => void = () => {}; Необходимо получить компилируемый код",
      "blocks": [
        {
          "id": 2,
          "line": "const issuer: string | number = 'value';"
        },
        {
          "id": 3,
          "line": "isNumber(issuer) && format(issuer);"
        },
        {
          "id": 4,
          "line": "const isNumber = (item: unknown) => typeof item === 'number';"
        },
        {
          "id": 5,
          "line": "const isNumber = (item: unknown): item is number \n  => typeof item === 'number';"
        }
      ],
      "answers": [
        [2,4,3],
        [4,2,3]
      ],
      "result": {
        "links": [
          { "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/MYewdgzgLgBAZiATgWwIZQFwwBQEsoCmyWYArsgEYGICUMAvAHwwBuIuAJgznUzAN4BfANwBYAFASA9FICSUCDFQwoATwAOBGAHNSqRFwAWUKOogYZAd2sA6NZojBEudVAA2qMNptJtUjiDAEFKGnhwUICAA1lIATFJg+ogglrheNsbIbgDEpBBp2gC09gSF6ogEHLjA6AQQEqCQsLgQAHLkVIjceITEMKRgUWApYDRY+EQwLTBklNQMzCUgcFO9DPT0MADks51bYuIyjdBTbR3zmz1EWANDI7yLGgTLq5MbmzvniPsSDeAnLQgpGoWGgzi8MAAPjMvtwtixUG5gT9xC12nNEHgIEDqHQAGR4+BINBQLE42jCIA"
          }
        ],
        "text": "You right!"
      },
      "sortable": true,
      "multiple": true
    },
    {
      "description": "Получить в итоге код который при добавлении в тип Method ещё одного варианта будет Type Check Error",
      "blocks": [
        {
          "id": 1,
          "line": "type Method = 'Post' | 'Get';"
        },
        {
          "id": 2,
          "line": "const handler = (request: {type: Method}): string => {"
        },
        {
          "id": 3,
          "line": "  switch (request.type) {"
        },
        {
          "id": 4,
          "line": "    case 'Post': return 'P';"
        },
        {
          "id": 5,
          "line": "    case 'Get': return 'G';"
        },
        {
          "id": 6,
          "line": "    default: return 'NaN'"
        },
        {
          "id": 7,
          "line": "  }"
        }
      ],
      "answers": [
        [ 1,2,3,4,5,7 ],
        [ 1,2,3,5,4,7 ],
        [ 2,3,5,4,5,7,1 ],
        [ 2,3,5,5,4,7,1 ]
      ],
      "result": {
        "links": [
          { "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/PTAuE8AcFMAIFlqgBYHsAmsC8sDkAFVAZ1F1gB88BxJMy3AEWgBslpcBuAWACgIYESNJhwFipCtVrcevAMaoAdiVjIAhovSsATtlgAKbdACOAV2gkAXLADe-aNcQoMAXwCU1ktoCWigObYAHy2vLBhsEQA7t6gcsgGRmYWoAB09m4hPOHZsHJqRHBiJLjWRqCm2op4+JyhOWF5BVKkpUgVVbhUtVn1sCDo0ABmaqbMoK3llXgAcmrTuHVhLrwuQA"
          }
        ],
        "text": "Техникак называется Exhaustive Check"
      },
      "sortable": true,
      "multiple": true
    },
    {
      "description": "Для типов: \ntype Get = { type: 'Get', url: string } \n type Post = { type: 'Post', data: string, url: string }; \n type Req = Get | Post; \nНеобходимо получить код который не будет проходить TypeCheck при добавлении к Req типа \ntype Delete = { type: 'Delete', url: string }; ",
      "blocks": [
        {
          "id": 1,
          "line": "const handler = (request: Req): string => {"
        },
        {
          "id": 2,
          "line": "  if (request.type === 'Post') { return 'P' }"
        },
        {
          "id": 3,
          "line": "  else if (request.type === 'Get') { return 'G' }"
        },
        {
          "id": 4,
          "line": "  neverCheck(request);"
        },
        {
          "id": 5,
          "line": "  return '';"
        },
        {
          "id": 6,
          "line": "}"
        },
        {
          "id": 7,
          "line": "const neverCheck = (subj: never) => subj; "
        },
        {
          "id": 8,
          "line": "  else if (request.type === 'Put') { return 'PT' }"
        }
      ],
      "answers": [
        [ 7,1,2,3,4,5,6 ],
        [ 1,2,3,4,5,6,7 ],
        [ 1,2,3,7,4,5,6 ]
      ],
      "result": {
        "links": [
          { 
            "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/C4TwDgpgBA4hxQLxQN5VJAXFA5HYOANFAK4BOANtgM7BkCWAdgOZQC+AsAFAbQAKAe1pJU6cBGw5BtIlAAmAQ2AKadJs2LkqUWgxbsA3NwD0x3lAAiECvGjI0vSVZvAIsrar2s2RrqfMAShAAjiL4UAA+UNIIUc62voEhYfCR0ULAvtwAxgKMwowQAG4QZADCABYQ2QDWIgAU1CQARgBW2IUlZACUSAB8Oi2tBlDcOXnCFQqMcjZkDWQhJBC02EHB3Z7q-ajcUPtQ9ABmUPWLwcu0AHTmiHe4MTi9aIvA5IwPOOx7B9bU0MdTudLsAbuIkPc8PAnqJXu9cDAvpwuD99p1SpVqjUzksVsBulkuAcoHCyB8cDgRmwgA"
          }
        ],
        "text": "You right!"
      },
      "sortable": true,
      "multiple": true
    },
    {
      "description": "Для типов \n type Animal = { make: undefined } \n type Dog = Animal & { bark: undefined } оставьте только компилируемый код. \nВ TSConfig strict = true",
      "blocks": [
        {
          "id": 1,
          "line": "type EventHandler<E extends Animal> = (event: E) => void"
        },
        {
          "id": 2,
          "line": "const handler: EventHandler<Animal> = (dog: Dog) => { console.log(dog.bark) }"
        },
        {
          "id": 3,
          "line": "const handler: EventHandler<Animal> = (animal: Animal) => { console.log(animal.make) }"
        }
      ],
      "answers": [
        [ 1,2 ],
        [ 2,1 ]
      ],
      "result": {
        "links": [
          { "text": "playground",
            "link": "https://www.typescriptlang.org/play?strictFunctionTypes=false#code/LAKALgngDgpgBAQQHYEsC2BDANnAvHAbzkwGsYAuOAVyQBMYAzFJGWuAX1EljgBEB7AOZ5EqTDgBkhOACMMAJxKUa9JizacQoAPTbu8AEIoAbgpQYkYAKLGYlgBIXaWGPIA8VuDAAeYO7QBnUXRsAD4RIhkTMwsAYxhHWJIAChhbS0orAEpKY34UDQBtACIo03lzJHjEkmKAXQBuLmh4GzswRzoXd08fPzog5BCscPxU9LBMrLxwvILQHW0AsArYsAAxGjWUfiQAFRaAyhWqeAZ+eXi4WN2VjHLK2Ig4c-kXrbAdpDgFQSo0doBRY3JDLOAACyc3UyE06zlcbiG4lGcGStCElAEgmmuHCRBBAX4LgAdFghGihMS5IpppoCWAIVDXDD2nDuoixGERMkLMNKEjsDi8dddoSSWTBDzOVhiaQYLSgA"
          }
        ],
        "text": "С ключом strictFunctionTypes поведение становится контравариантым вместо умолчательного бивариантного для параметров функции"
      },
      "sortable": true,
      "multiple": true
    },
    {
      "description": "Для типа\ntype Issuer = { a: number, b: string, c: boolean };\nКакая конструкция оствит тип { a: number, b: string }?",
      "blocks": [
        {
          "id": 1,
          "line": "type Subj = Pick<Issuer, 'a' | 'b'>"
        },
        {
          "id": 2,
          "line": "type Subj = Extract<Issuer, 'a' | 'b'>"
        },
        {
          "id": 3,
          "line": "type Subj = Exclude<Issuer, 'c'>"
        },
        {
          "id": 4,
          "line": "type Subj = Omit<Issuer, 'c'>"
        }
      ],
      "answers": [
        [ 1,4 ]
      ],
      "result": {
        "links": [
          { 
            "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/C4TwDgpgBAkgznArhATlAvFA3lAhgLigDtEBbAI1QBopzC5gUBLIgcxoGNDyB7HgGwi4iUAL4BuALAAoGQHo5oSFADKicgCsMUAApMOAawA88JNSgByXBagAfS+QsA+eXKjv3APQD8rpdDVNbQBRAA9GXA5gEwRkFBorG3sLRxdpBX9VdS1MMI5+RAATCBizeMsOZxlMwJyoAHlSJmjTOITKtIUPKB8gA"
          }
        ],
        "text": "Для такой трансформации подходят utility types: Omit и Pick"
      },
      "sortable": false,
      "multiple": true
    },
    {
      "description": "Для типа\ntype Issuer = 'A'|'B'|'C';\nКакая конструкция оствит тип 'getA' | 'getB'?",
      "blocks": [
        {
          "id": 1,
          "line": "`get${Exclude<Issuer, 'C'>}`"
        },
        {
          "id": 2,
          "line": "`get${Extract<Issuer, 'A' | 'B'>}`"
        },
        {
          "id": 3,
          "line": "`get${Pick<Issuer, 'A' | 'B'>}`"
        },
        {
          "id": 4,
          "line": "`get${Omit<Issuer, 'C'>}`"
        },
        {
          "id": 5,
          "line": "'get' + Exclude<Issuer, 'C'>"
        },
        {
          "id": 6,
          "line": "'get' + Extract<Issuer, 'A' | 'B'>"
        }
      ],
      "answers": [
        [ 1,2 ]
      ],
      "result": {
        "links": [
          { 
            "text": "playground",
            "link": "https://www.typescriptlang.org/play?#code/C4TwDgpgBAkgznArhATlAvFA5AQSwHywCECsBhLAbgFgAoOgegdEigGVEAjAKwygAMA5hGAASAN4AFAJYBjANYAeeElQAabHij5sJAHwBffowZQzZgHoB+Ey2gcefISIkBRAB7AUAQ1nBlCMgoGrhY2rpYhsa0TOaWNrR27Fy8mM5i4h6yADaIACYQAarB2BRRJnHWtuD2KU7CGQDyALbS-ipBIWVGFebWQA"
          },
          { 
            "text": "Template Literal Types",
            "link": "https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"
          }
        ],
        "text": "Для такой трансформации подходят utility types: Exclude и Extract. А для построения с get используется Template Literal Types"
      },
      "sortable": false,
      "multiple": true
    }
  ]